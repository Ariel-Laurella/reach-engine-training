<!--
This workflow is inteded to ingest files, creating new asset and fill metadata according to a given CSV.
It devives from _anyDirectoryIngest.xml workflow.
.
-->

<workflow xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://levelsbeyond.com/schema/workflow"
	xmlns:nimbus="http://levelsbeyond.com/schema/workflow/nimbus"
	xsi:schemaLocation="http://levelsbeyond.com/schema/latest http://levelsbeyond.com/schema/latest/studio.xsd"
    id="IngestDirectoryWithMetadata"
    name="Ingest Directory With Metadata"
    executionLabelExpression="Ingest Directory With Metadata | Directory: ${directoryToIngest.absolutePath}"
    deadlineExpression=""
    subjectDOClassName=""
    resultDataDef=""
    showInUserInterface="true"
    sdkVersion="5.21"
	>

	<!-- TODO put check if workflow is running as initialStep -->

	<initialStepName>check if directory is empty</initialStepName>
	
	
	<!-- ................................................... Initial Checks .................................................... -->
	<queryStep name="check if workflow is running"
		targetDataObjectClass="WorkflowExecution"
		resultDataDef="currentExecutions"
		executionLabelExpression="Is a workflow running on this directory already? ${currentExecutions.size() != 0}"
		>
		<transition condition="${currentExecutions.size() == 0}">
			<targetStepName>check if directory is empty</targetStepName>
		</transition>
		<transition condition="true">
			<targetStepName>workflow is running</targetStepName>
		</transition>
		
		<criteria>
			<![CDATA[
                <criteria>
                    <and>
                        <condition property="workflowVersion.workflow.key" op="eq">
                            <test value="${ #this.workflow.workflowVersion.workflow.key }" />
                        </condition>
                        <condition property="uuid" op="noteq">
                            <test value="${ #this.workflow.uuid }" />
                        </condition>
                        <condition property="executionLabel" op="like">
							<test value="%${T(org.apache.commons.lang.StringEscapeUtils).escapeXml(directoryToIngest.absolutePath)}%" />
						</condition>
                        <condition property="status" op="in">
                            <tests>
                                <test value="CREATED" />
                                <test value="QUEUED" />
                                <test value="EXECUTING" />
                            </tests>
                        </condition>
                    </and>
                </criteria>
            ]]>
		</criteria>
	</queryStep>
	
	<noopStep name="check if directory is empty"
		executionLabelExpression="are there files in the directory? ${filesToIngest != null AND filesToIngest.size() &gt; 0}"
		>
		<transition condition="${filesToIngest != null AND filesToIngest.size() &gt; 0}">
			<targetStepName>copy csv from S3 to Local</targetStepName>
		</transition>
		<transition condition="true">
			<targetStepName>no files to process</targetStepName>
		</transition>
	</noopStep>

	<copyFileStep name="copy csv from S3 to Local"
				  executionLabelExpression="copy csv file from S3 to Local Reachengine"
				  sourceFileExpression="${csvMetadataFile}"
				  targetDirectoryExpression="${localDirectoryPath}/${uuid}"
				  targetFilenameExpression="${uuid}.csv"
				  createTargetDirectoryFlag="true"
				  nextStep="copy json from S3 to Local" />


	<copyFileStep name="copy json from S3 to Local"
				  executionLabelExpression="copy json from S3 to Local Reachengine"
				  sourceFileExpression="${jsonMappingFile}"
				  targetDirectoryExpression="${localDirectoryPath}/${uuid}"
				  targetFilenameExpression="${uuid}.json"
				  nextStep="get metadata from csv" />


	<groovyStep	name="get metadata from csv"
				   resultDataDef="jsonMetadata"
				   executionLabelExpression="getting metadata from csv to json"
				   nextStep="delete local csv and json"
	>
		<script>
			<![CDATA[

		// Convert csv to Json format

			import groovy.json.JsonOutput
			import groovy.json.JsonSlurper

def jsonMappingPath = localDirectoryPath + "/"+ uuid + "/"+ uuid + ".json"
def csvMetadataPath = localDirectoryPath +"/" + uuid + "/"+ uuid + ".csv"
def jsonMappingSlurper = new JsonSlurper()
def jsonListSlurper = new JsonSlurper()
def digestedCsvRows = new ArrayList()
def reachFieldNames = new ArrayList()
def csvColumnPosition = new ArrayList()
def csvRows = new ArrayList()
def jsonMappingelemnts = [:]
def csvHeaderFilename = "fileName"
def sCurrentLine

File jsonFileToProcess = new File(jsonMappingPath)
File csvFileToProcess = new File(csvMetadataPath)

//Parse scv file
csvFileToProcess.eachLine {
    csvRows.add(it)
}


//save reachFieldNames from the Json mapping
def csvHeader = csvRows[0].split(",(?=(?:[^\"]*\"[^\"]*\")*[^\"]*\$)")
jsonMappingelemnts = jsonMappingSlurper.parse(jsonFileToProcess)

for (int i = 0; i < jsonMappingelemnts.size(); i++) {
    for (int j = 0; j < csvHeader.size(); j++)
    {
         if (jsonMappingelemnts.keySet()[i] == csvHeader[j])
         {
            reachFieldNames.add(jsonMappingelemnts.values()[i])
            csvColumnPosition.add(j)
         }
        if (csvHeader[j] == csvHeaderFilename && i == 0)
        {
            reachFieldNames.add(csvHeaderFilename)
            csvColumnPosition.add(j)
        }
    }

}

//remove HeaderRow from array csvRows
csvRows.remove(0)


// start looping over the lines in the CSV
def rowCounter = 0

for (def row in csvRows){
    rowCounter++
    Map singleLineResult = [:]  // this will be the return for this loop execution

    if (row == null || !row.contains(",") ){
        continue
    }

    //def splitRow = row.split(",")
    def splitRow = row.split(",(?=(?:[^\"]*\"[^\"]*\")*[^\"]*\$)")



    for (int j = 0; j < csvColumnPosition.size(); j++)
    {
        def rowValue
        try {
              rowValue = (j < splitRow.size()) ? splitRow[csvColumnPosition[j]]: ""
        }
        catch (Exception e)
        {
              rowValue = ""
        }

        singleLineResult.put(reachFieldNames[j], rowValue)
    }
    singleLineResult.put("proxyTriage","false")
    singleLineResult.put("success","")
    singleLineResult.put("message","")

    digestedCsvRows.add(singleLineResult)

}

//return JsonOutput.toJson(digestedCsvRows)
return digestedCsvRows

       ]]>
		</script>
	</groovyStep>

	<deleteFileStep name="delete local csv and json"
					executionLabelExpression="deleting temp path: ${localDirectoryPath}/${uuid}"
					sourceFilesExpression="${localDirectoryPath}/${uuid}"
					continueOnException="true"
					nextStep="query for running subflows"
	/>



	<!-- ................................................... Queue Loop ................................................... -->
	<queryStep name="query for running subflows"
			   targetDataObjectClass="WorkflowExecution"
			   resultDataDef="executingSubflows"
			   executionLabelExpression="checking for workflows (with name = ${subflowName}) that match this directory that are also not in a finished state"
			   devStep="false"
			   nextStep="process files"
	>
		<criteria>
			<![CDATA[
            <criteria>
                <and>
                    <condition property="workflowVersion.workflow.key" op="eq">
                        <test value="${ingestSubflow}"/>
                    </condition>
                    <condition property="executionLabel" op="like">
							<test value="%${T(org.apache.commons.lang.StringEscapeUtils).escapeXml(directoryToIngest.absolutePath)}%" />
						</condition>
                    <condition property="status" op="in">
                        <tests>
                            <test value="CREATED" />
                            <test value="QUEUED" />
                            <test value="EXECUTING" />
                         </tests>
                    </condition>
                </and>
            </criteria>
            ]]>
		</criteria>
	</queryStep>


	<executeSubflowStep name="process files"
						executionLabelExpression="Ingesting ${filesToIngest.size()} Files"
						targetWorkflowId="${ingestSubflow}"
						subjectChangePath="${filesToIngest[1]}"
						subflowTargetDataDef="fileToIngest"
						resultDataDef="jsonMetadata"
						waitForCompletionExpression="true"
						nextStep="sendEmail"
	>
		<!-- ingest -->
		<subflowContextDataMapping parentDataDef="sourceAsMezz"             subflowDataDef="sourceAsMezz"/>
		<subflowContextDataMapping parentDataDef="checkForDuplicate"        subflowDataDef="checkForDuplicate"/>
		<subflowContextDataMapping parentDataDef="overwriteExisting"        subflowDataDef="overwriteExisting"/>
		<subflowContextDataMapping parentDataDef="versionDuplicate"         subflowDataDef="versionDuplicate"/>
		<!-- metadata -->
		<subflowContextDataMapping parentDataDef="failOnMetadataError"      subflowDataDef="failOnMetadataError"/>
		<subflowContextDataMapping parentDataDef="collections"              subflowDataDef="collections"/>
		<subflowContextDataMapping parentDataDef="metadataForm"             subflowDataDef="metadataForm"/>
		<subflowContextDataMapping parentDataDef="metadataFormType"         subflowDataDef="metadataFormType"/>
		<subflowContextDataMapping parentDataDef="categories"               subflowDataDef="categories"/>
		<subflowContextDataMapping parentDataDef="categoryNames"            subflowDataDef="categoryNames"/>
		<subflowContextDataMapping parentDataDef="jsonMetadata"             subflowDataDef="jsonMetadata"/>
		<subflowContextDataMapping parentDataDef="linkMetadata"             subflowDataDef="linkMetadata"/>
		<!-- proxies -->
		<subflowContextDataMapping parentDataDef="failOnProxiesError"       subflowDataDef="failOnProxiesError"/>
		<subflowContextDataMapping parentDataDef="prioritiesJson"           subflowDataDef="prioritiesJson"/>
		<subflowContextDataMapping parentDataDef="createMezz"               subflowDataDef="createMezz"/>
		<subflowContextDataMapping parentDataDef="createProxy"              subflowDataDef="createProxy"/>
		<subflowContextDataMapping parentDataDef="createThumbVideo"         subflowDataDef="createThumbVideo"/>
		<subflowContextDataMapping parentDataDef="createThumb"              subflowDataDef="createThumb"/>
		<subflowContextDataMapping parentDataDef="videoMezzTemplate"        subflowDataDef="videoMezzTemplate"/>
		<subflowContextDataMapping parentDataDef="videoProxyTemplate"       subflowDataDef="videoProxyTemplate"/>
		<subflowContextDataMapping parentDataDef="videoThumbVideoTemplate"  subflowDataDef="videoThumbVideoTemplate"/>
		<subflowContextDataMapping parentDataDef="videoThumbnailPercentage" subflowDataDef="videoThumbnailPercentage"/>
		<subflowContextDataMapping parentDataDef="audioProxyTemplate"       subflowDataDef="audioProxyTemplate"/>
		<subflowContextDataMapping parentDataDef="imageProxyArguments"      subflowDataDef="imageProxyArguments"/>
		<subflowContextDataMapping parentDataDef="imageThumbArguments"      subflowDataDef="imageThumbArguments"/>
		<subflowContextDataMapping parentDataDef="documentProxyArguments"   subflowDataDef="documentProxyArguments"/>
		<subflowContextDataMapping parentDataDef="documentThumbArguments"   subflowDataDef="documentThumbArguments"/>
		<subflowContextDataMapping parentDataDef="jsonMetadata"   			subflowDataDef="jsonMetadata"/>

	</executeSubflowStep>


	<queryStep name="query for recordOID"
			   executionLabelExpression="Querying"
			   targetDataObjectClass="AssetMaster"
			   resultDataDef="resultObject"

	>
		<transition condition="${resultObject != null}">
			<targetStepName>sendEmail</targetStepName>
		</transition>
		<transition condition="${true}">
			<targetStepName>end</targetStepName>
		</transition>

		<criteria>
			<![CDATA[
                <criteria>
                    <and>
                        <condition property="metadata.recordOID" op="eq">
                            <test value="${recordNumber}"/>
                        </condition>
                    </and>
                </criteria>
            ]]>
		</criteria>
	</queryStep>

	<emailStep 	name="sendEmail"  emailAddressesExpression="${userEmailAddress}"
				  subjectExpression="I'm just writing to say.."
				  nextStep="end"
	>
		<body>
			<![CDATA[    ${resultObject.metadata.longDescription}  ]]>
		</body>
	</emailStep>


	<!-- ................................................... End Steps .................................................... -->
	<!-- success -->


	<noopStep name="no files to process"
		executionLabelExpression="No files in ${directoryToIngest.absolutePath}."
		pctComplete="99"
		nextStep="end"
		/>
	
	
	<noopStep name="end"    pctComplete="100"/>


	<!-- fail -->
	<failWorkflowStep name="workflow is running"
		executionLabelExpression="Workflow already executing on the directory"
		reasonExpression="Workflow already executing on the directory"
		/>
	
	
	<!-- ............................................... Context Data Defs ................................................ -->

	<!-- ....... User Input Variables ........ -->
	<contextDataDef name="directoryToIngest" 		dataType="Directory"	userInput="true"    label="Directory To Ingest"  required="false" displayIndex="1" />
	<contextDataDef name="csvMetadataFile" 			dataType="File"			userInput="true"    label="Metadata File (.csv)"  required="false" displayIndex="2" />
	<contextDataDef name="jsonMappingFile" 			dataType="File"			userInput="true"    label="Mapping File (.json)"  required="false" displayIndex="3" />

	<contextDataDef name="jsonMetadata" 			dataType="JSON" />
	<contextDataDef name="userEmailAddress" 		dataType="String" 		defaultDataExpression="${#this.startedBy.emailAddress}"/>


	<contextDataDef name="uuid"  		 			dataType="String"  defaultDataExpression="${#uuid().toString()}" />
	<contextDataDef name="localDirectoryPath"   	dataType="String"  defaultDataExpression="/reachengine/media/temp" />

	<contextDataDef name="resultObject" dataType="Data Object" />




	<!-- .......... Input Variables .......... -->
	<!-- ingest options (defaults in subflow) -->
	<contextDataDef name="sourceAsMezz"             dataType="Boolean"/>
	<contextDataDef name="checkForDuplicate"        dataType="Boolean"/>
	<contextDataDef name="overwriteExisting"        dataType="Boolean"/>
	<contextDataDef name="versionDuplicate"         dataType="Boolean"/>
	<!-- transcode options -->
	<contextDataDef name="failOnProxiesError"       dataType="Boolean"/>
	<contextDataDef name="asyncProxies"             dataType="Boolean"/>
	<!-- create proxies? (defaults in subflows) -->
	<contextDataDef name="prioritiesJson"           dataType="JSON">
		<description>
			A JSON with the structure:
				{"mezzanine":w, "proxy":x, "thumbnailVideo":y, "thumbnail":z}
		</description>
	</contextDataDef>
	<contextDataDef name="createMezz"               dataType="Boolean"/>
	<contextDataDef name="createProxy"              dataType="Boolean"/>
	<contextDataDef name="createThumb"              dataType="Boolean"/>
	<contextDataDef name="createThumbVideo"         dataType="Boolean"/>
	<!-- supply a file for proxies? -->
	<contextDataDef name="mezzFile"                 dataType="File"/>
	<contextDataDef name="proxyFile"                dataType="File"/>
	<contextDataDef name="thumbFile"                dataType="File"/>
	<contextDataDef name="thumbVideoFile"           dataType="File"/>
	<!-- Templates/Args for proxies creation (defaults in subflows) -->
	<contextDataDef name="videoMezzTemplate"    	dataType="String"/>
	<contextDataDef name="videoProxyTemplate"    	dataType="String"/>
	<contextDataDef name="videoThumbVideoTemplate"  dataType="String"/>
	<contextDataDef name="videoThumbnailPercentage" dataType="Integer"/>
	<contextDataDef name="audioProxyTemplate"       dataType="String"/>
	<contextDataDef name="imageProxyArguments"      dataType="String"/>
	<contextDataDef name="imageThumbArguments"      dataType="String"/>
	<contextDataDef name="documentProxyArguments"   dataType="String"/>
	<contextDataDef name="documentThumbArguments"   dataType="String"/>
	
	<!-- ....... Processing Variables ........ -->
	<contextDataDef name="currentExecutions" 	    dataType="Data Object" 	multiple="true"/>
	<contextDataDef name="filesToIngest" 		    dataType="File"		    multiple="true"     defaultDataExpression="${#walkDir(directoryToIngest, null)}"/>
	<!-- queue loop variables -->
	<contextDataDef name="nextFiles"    		    dataType="File" 		multiple="true"/>
	<contextDataDef name="executingSubflows" 	    dataType="Data Object" 	multiple="true"/>
	<contextDataDef name="queueLimit" 			    dataType="Integer" 		defaultDataExpression="${#sysconfig('workflows.default.ingestDirectory.queueLimit') ?: 11}"/>
	<contextDataDef name="batchSize" 		        dataType="Integer" 		defaultDataExpression="${#sysconfig('workflows.default.ingestDirectory.batchSize') ?: 10}"/>
	<contextDataDef name="queryPollInterval"  	    dataType="Integer" 		defaultDataExpression="${#sysconfig('workflows.default.ingestDirectory.queryPollInterval') ?: 60}"/>
	<contextDataDef name="ingestSubflow"      	    dataType="String" 		defaultDataExpression="IngestAssetWithMetadata"/>


<!-- TODO: These variables must be removed -->

	<contextDataDef name="recordNumber" dataType="String" defaultDataExpression="100201"  />


	<contextDataDef name="collections"              dataType="Data Object"  label="Collections"          multiple="true" />
	<contextDataDef name="metadataForm"             dataType="MetadataForm" label="Metadata Form"/>

	<!-- metadata options -->
	<contextDataDef name="failOnMetadataError"      dataType="Boolean"/>
	<contextDataDef name="categories"               dataType="Data Object"  multiple="true"/>
	<contextDataDef name="categoryNames"            dataType="String"           multiple="true"/>
	<contextDataDef name="jsonMetadata"             dataType="JSON">
		<description>
			Single JSON where:
			Keys are metadata property names
			Values are what to set the matching property to on this asset
		</description>
	</contextDataDef>
	<contextDataDef name="linkMetadata"             dataType="JSON"             multiple="true">
		<description>
			Array of JSONs where:
			Each JSON has 2 Keys (propertyName and linkInfo):
			propertyName's value is a metadata property name of type link
			linkInfo's value is a JSON with 2 keys (title and url):
			title's value is the display name for the link
			url's value is the url to open when the title is clicked on
		</description>
	</contextDataDef>
	<contextDataDef name="metadataFormType"         dataType="String"           defaultDataExpression="access">
		<description>
			TEMPORARY!!! (Forms will be standardized to the same format in the future)
			Valid types = "access" or "panel"
		</description>
	</contextDataDef>

</workflow>
