<!--
  ~ Levels Beyond CONFIDENTIAL
  ~
  ~ Copyright 2003 - 2017 Levels Beyond Incorporated
  ~ All Rights Reserved.
  ~
  ~ NOTICE:  All information contained herein is, and remains
  ~ the property of Levels Beyond Incorporated and its suppliers,
  ~ if any.  The intellectual and technical concepts contained
  ~ herein are proprietary to Levels Beyond Incorporated
  ~ and its suppliers and may be covered by U.S. and Foreign Patents,
  ~ patents in process, and are protected by trade secret or copyright law.
  ~ Dissemination of this information or reproduction of this material
  ~ is unlawful and strictly forbidden unless prior written permission is obtained
  ~ from Levels Beyond Incorporated.
  -->

<workflow xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns="http://levelsbeyond.com/schema/workflow" 
          xmlns:nimbus="http://levelsbeyond.com/schema/workflow/nimbus"
          xsi:schemaLocation="
            http://levelsbeyond.com/schema/workflow http://www.levelsbeyond.com/schema/workflow-4.9.xsd
            http://levelsbeyond.com/schema/workflow/nimbus http://www.levelsbeyond.com/schema/production/nimbus-common-workflow-1.5.xsd"
          id="_documentAssetIngest"
          name="Ingest Document Asset"
          executionLabelExpression="Ingest file ${fileToIngest.name} into repository"
          description=""
          subjectDOClassName=""
          showInUserInterface="false"
          resultDataDef="assetVersion"
          deadlineExpression=""
          sdkVersion="4.2">

	<initialStepName>init existing asset content</initialStepName>

	<setContextData name="init existing asset content"
	                targetDataDef="existingAssetContent"
	                valueExpression="${#assetService().getAssetContent(fileToIngest)}">
		<transition condition="${true}">
			<targetStepName>check for existing asset</targetStepName>
		</transition>

	</setContextData>

	<noopStep name="check for existing asset">
		<transition condition="${existingAssetContent != null}">
			<targetStepName>set existing asset version</targetStepName>
		</transition>
		<transition condition="=true">
			<targetStepName>check if duplicate asset names are allowed</targetStepName>
		</transition>
	</noopStep>

	<noopStep name="check if duplicate asset names are allowed">
		<transition condition="${customRepoSource != null and allowDuplicateNamesFlag}">
			<targetStepName>move source to custom repo</targetStepName>
		</transition>
		<transition condition="${allowDuplicateNamesFlag}">
			<targetStepName>ingest file</targetStepName>
		</transition>
		<transition condition="=true">
			<targetStepName>convert file name for duplicate asset check</targetStepName>
		</transition>
	</noopStep>

	<setContextData name="convert file name for duplicate asset check"
	                targetDataDef="fileToIngestName"
	                valueExpression="${T(org.apache.commons.lang.StringEscapeUtils).escapeXml(fileToIngest.name)}">
		<transition condition="${true}">
			<targetStepName>check for duplicate asset</targetStepName>
		</transition>
	</setContextData>

	<queryStep name="check for duplicate asset"
	           targetDataObjectClass="AssetVersion" resultDataDef="existingAssetVersion">
		<transition condition="${existingAssetVersion != null}">
			<targetStepName>set existing asset master</targetStepName>
		</transition>
		<transition condition="${customRepoSource != null}">
			<targetStepName>move source to custom repo</targetStepName>
		</transition>
		<transition condition="=true">
			<targetStepName>ingest file</targetStepName>
		</transition>
		<criteria>
			<![CDATA[
            <criteria>
            <and>
                <condition property="name" op="eq"><test value="${fileToIngestName}"/></condition>
                <condition property="currentVersionFlag" op="eq"><test value="true"/></condition>
            </and>
            </criteria>
            ]]>
		</criteria>
	</queryStep>

	<setContextData name="set existing asset version"
	                targetDataDef="existingAssetVersion"
	                valueExpression="${existingAssetContent.asset.currentVersion}"
	                devStep="true"
		>
		<transition condition="${true}">
			<targetStepName>set existing asset master</targetStepName>
		</transition>

	</setContextData>

	<setContextData name="set existing asset master"
	                targetDataDef="existingAssetMaster"
	                valueExpression="${existingAssetVersion.masterAsset}"
	                devStep="true"
		>
		<transition condition="${true}">
			<targetStepName>set asset version</targetStepName>
		</transition>

	</setContextData>

	<setContextData name="set asset version"
	                targetDataDef="assetVersion"
	                valueExpression="${existingAssetVersion}"
	                devStep="true">
		<transition condition="${true}">
			<targetStepName>log content lengths</targetStepName>
		</transition>

	</setContextData>

	<testStep name="log content lengths" devStep="true"
			  outputExpression="incoming file length = ${fileToIngest.length}, current asset file length = ${assetVersion?.originalContent?.fileSize}">
		<transition condition="=true">
			<targetStepName>compare content length</targetStepName>
		</transition>
	</testStep>

	<noopStep name="compare content length">
		<transition
			condition="${fileToIngest.length == existingAssetVersion?.originalContent?.fileSize}">
			<targetStepName>check for asset metadata</targetStepName>
		</transition>
		<transition condition="${existingAssetContent != null}">
			<targetStepName>check for asset metadata</targetStepName>
		</transition>
		<transition condition="${customRepoSource != null}">
			<targetStepName>move source to custom repo</targetStepName>
		</transition>
		<transition condition="${true}">
			<targetStepName>ingest file</targetStepName>
		</transition>
	</noopStep>
	
	<!-- customRepo subflow -->
	<executeSubflowStep
		name="move source to custom repo"
		targetWorkflowId="_moveToCustomRepo" 
		resultDataDef="fileToIngest"
		>
		<transition condition="true">
			<targetStepName>ingest file</targetStepName>
		</transition>
		<subflowContextDataMapping parentDataDef="fileToIngest" subflowDataDef="fileToIngest"/>
		<subflowContextDataMapping parentDataDef="customRepoSource" subflowDataDef="repoDirectoryString"/>
	</executeSubflowStep>	

	<saveAssetStep name="ingest file"
	               executionLabelExpression="Ingesting file ${fileToIngest.path}"
	               contentExpression="${fileToIngest}" assetExpression="${existingAssetVersion}"
	               contentUseExpression="${skipMezzanineFlag ? '|SOURCE|MEZZANINE|' : 'SOURCE'}" pctComplete="10" resultDataDef="assetVersion"
	               searchableFlagExpression="true">
		<transition condition="=true">
			<targetStepName>check for asset metadata</targetStepName>
		</transition>
	</saveAssetStep>

	<noopStep name="check for asset metadata">
		<transition condition="${metadata != null and metadata.size() > 0}">
			<targetStepName>save asset metadata</targetStepName>
		</transition>
		<transition condition="${jsonMetadata != null}">
			<targetStepName>save asset metadata</targetStepName>
		</transition>
		<transition condition="${metadataRootPath != null and metadataPathProperties != null}">
			<targetStepName>save path metadata</targetStepName>
		</transition>
		<transition condition="=true">
			<targetStepName>set temp thumbnail file</targetStepName>
		</transition>
	</noopStep>

	<saveDataObjectStep name="save asset metadata"
	                    dataObjectExpression="${assetVersion.masterAsset.metadata}"
	                    nameValuePairsDataDef="metadata" jsonValuesDataDef="jsonMetadata">
		<transition condition="${metadataRootPath != null and metadataPathProperties != null}">
			<targetStepName>save path metadata</targetStepName>
		</transition>
		<transition condition="=true">
			<targetStepName>set temp thumbnail file</targetStepName>
		</transition>
	</saveDataObjectStep>

	<nimbus:savePathMetadataStep name="save path metadata"
	                             metadataObjectExpression="${assetVersion.masterAsset.metadata}"
	                             assetFileExpression="${fileToIngest}"
	                             rootPathExpression="${metadataRootPath}"
	                             metadataPropertiesExpression="${metadataPathProperties}">
		<transition condition="=true">
			<targetStepName>set temp thumbnail file</targetStepName>
		</transition>
	</nimbus:savePathMetadataStep>

	<setContextData name="set temp thumbnail file"
					targetDataDef="tempThumbnailFile"
					valueExpression="${tempPath}/${#baseFilename(assetVersion?.file?.name)}_thumb.jpeg"
					devStep="true">
		<transition condition="${true}">
			<targetStepName>set temp thumbnail proxy file</targetStepName>
		</transition>

	</setContextData>

	<setContextData name="set temp thumbnail proxy file"
					targetDataDef="tempThumbnailProxyFile"
					valueExpression="${tempPath}/${#baseFilename(assetVersion?.file?.name)}_proxy.jpg"
					devStep="true">
		<transition condition="${true}">
			<targetStepName>set asset master</targetStepName>
		</transition>

	</setContextData>

	<setContextData
		name="set asset master"
		targetDataDef="assetMaster" 
		valueExpression="${assetVersion.masterAsset}" >
		
		<transition condition="${exifExtraction == true}">
			<targetStepName>extract exif metadata</targetStepName>
		</transition>
		<transition condition="=true">
			<targetStepName>check for asset category</targetStepName>
		</transition>		
	</setContextData>
	
	<!-- exif? -->
	<executeSubflowStep name="extract exif metadata"
		targetWorkflowId="_extractExifFromFile"
		subjectChangePath="${ assetVersion.file }"
		subflowTargetDataDef="fileToIngest"
		resultDataDef="exifMetadata"
		continueOnException="false"
		pctComplete="60"
		>
		<transition condition="${exifMetadata != null}">
			<targetStepName>apply metadata to result</targetStepName>
		</transition>
		<transition condition="${ true }">
			<targetStepName>check for asset category</targetStepName>
		</transition>   
		
	</executeSubflowStep>
	
	<!-- apply exif metadata to result -->
	<nimbus:setMetadataValuesStep name="apply metadata to result"
		displayName="Apply metadata to the asset"
		targetExpression="${ assetVersion }"
		propertyPrefixExpression="${ exifPrefix }"
		metadataPairsExpression="${ exifMetadata }"
		metadataGroupExpression="${ exifMetadataGroupName }"
		createIfNotFoundExpression="${ true }"
		continueOnException="false"
		pctComplete="70">
		
		<transition condition="${ true }">
			<targetStepName>check for asset category</targetStepName>            
		</transition>
	</nimbus:setMetadataValuesStep>
	
	<!-- single category for legacy workflows -->
	<noopStep name="check for asset category">
		<transition condition="${ categoryName != null }">
			<targetStepName>set asset category</targetStepName>
		</transition>
		<transition condition="${categories.size() > 0}">
			<targetStepName>add categories to asset</targetStepName>
		</transition>
		<transition condition="${collections.size() > 0}">
			<targetStepName>add collections to asset</targetStepName>
		</transition>
		<transition condition="${ true }">
			<targetStepName>create_thumb</targetStepName>
		</transition>
	</noopStep>
	
	<nimbus:changeMetaCategoryStep 
		name="set asset category"                           
		targetObjectExpression="${assetVersion}"
		>
		
		<transition condition="${categories.size() > 0}">
			<targetStepName>add categories to asset</targetStepName>
		</transition>
		<transition condition="${collections.size() > 0}">
			<targetStepName>add collections to asset</targetStepName>
		</transition>
		<transition condition="${ true }">
			<targetStepName>create_thumb</targetStepName>
		</transition>
		
		<nimbus:addCategory>${categoryName}</nimbus:addCategory>
	</nimbus:changeMetaCategoryStep>
	
	<!-- multi category addition -->
	<executeSubflowStep
		name="add categories to asset"
		targetWorkflowId="_addCategoryOrCollectionToAsset"
		subjectChangePath="${categories}"
		subflowTargetDataDef="category">
		
		<transition condition="${collections.size() > 0}">
			<targetStepName>add collections to asset</targetStepName>
		</transition>
		<transition condition="${ true }">
			<targetStepName>create_thumb</targetStepName>
		</transition>
		<subflowContextDataMapping parentDataDef="assetMaster" subflowDataDef="asset"/>
	</executeSubflowStep>
	
	<!-- multi collection addition -->
	<executeSubflowStep
		name="add collections to asset"
		targetWorkflowId="_addCategoryOrCollectionToAsset" 
		subjectChangePath="${collections}"
		subflowTargetDataDef="collection">
		
		<transition condition="${ true }">
			<targetStepName>create_thumb</targetStepName>
		</transition>
		<subflowContextDataMapping parentDataDef="assetMaster" subflowDataDef="asset"/>
	</executeSubflowStep>

	<runCommandStep name="create_thumb"
	                executablePathExpression="${imagemagick}"
	                pctComplete="80"
	                stallOnErrorResultCode="false">

		<transition condition="${ !tempThumbnailFile.exists() }">
			<targetStepName>raise asset ingested event</targetStepName>
		</transition>
		<transition condition="${customRepoProxies != null}">
			<targetStepName>move thumb to custom repo</targetStepName>
		</transition>
		<transition condition="=true">
			<targetStepName>save thumbnail</targetStepName>
		</transition>

		<arg>${assetVersion.file.absolutePath}[0]</arg>
		<arg>-define</arg>
		<arg>jpeg:extent=400kb</arg>
		<arg>${tempThumbnailFile}</arg>

	</runCommandStep>

	<!-- customRepo subflow -->
	<executeSubflowStep
		name="move thumb to custom repo"
		targetWorkflowId="_moveToCustomRepo" 
		resultDataDef="thumbnailFile"
		>
		<transition condition="true">
			<targetStepName>save thumbnail</targetStepName>
		</transition>
		<subflowContextDataMapping parentDataDef="thumbnailFile" subflowDataDef="fileToIngest"/>
		<subflowContextDataMapping parentDataDef="customRepoProxies" subflowDataDef="repoDirectoryString"/>
	</executeSubflowStep>

	<saveAssetStep name="save thumbnail"
	               contentExpression="${ tempThumbnailFile }"
	               assetExpression="${assetVersion}"
	               contentUseExpression="Thumbnail"
	               pctComplete="95"
	               contentTemplateExpression="Thumbnail Template"
	               versionAssetExpression="=false"
	               continueOnException="true">

		<transition condition="${ !tempThumbnailFile.exists() }">
			<targetStepName>raise asset ingested event</targetStepName>
		</transition>
		<transition condition="=true">
			<targetStepName>create_proxy</targetStepName>
		</transition>
	</saveAssetStep>

	<runCommandStep name="create_proxy"
	                executablePathExpression="${imagemagick}"
	                pctComplete="80"
	                stallOnErrorResultCode="false">

		<transition condition="${ !tempThumbnailProxyFile.exists() }">
			<targetStepName>raise asset ingested event</targetStepName>
		</transition>
		<transition condition="${customRepoProxies != null}">
			<targetStepName>move proxy to custom repo</targetStepName>
		</transition>
		<transition condition="=true">
			<targetStepName>save_proxy</targetStepName>
		</transition>

		<arg>${assetVersion.file.absolutePath}[0]</arg>
		<arg>-define</arg>
		<arg>jpeg:extent=5000kb</arg>
		<arg>${tempThumbnailProxyFile}</arg>

	</runCommandStep>

	<!-- customRepo subflow -->
	<executeSubflowStep
		name="move proxy to custom repo"
		targetWorkflowId="_moveToCustomRepo" 
		resultDataDef="thumbnailProxyFile"
		>
		<transition condition="true">
			<targetStepName>save_proxy</targetStepName>
		</transition>
		<subflowContextDataMapping parentDataDef="thumbnailProxyFile" subflowDataDef="fileToIngest"/>
		<subflowContextDataMapping parentDataDef="customRepoProxies" subflowDataDef="repoDirectoryString"/>
	</executeSubflowStep>

	<saveAssetStep name="save_proxy"
	               displayName="save proxy"
	               contentExpression="${ tempThumbnailProxyFile }"
	               assetExpression="${assetVersion}" contentUseExpression="Proxy" pctComplete="95"
	               contentTemplateExpression="${ #imageProxyTemplate().name }"
	               continueOnException="true" versionAssetExpression="=false">
		<transition condition="${ tempThumbnailProxyFile == null }">
			<targetStepName>check whether to raise event</targetStepName>
		</transition>
		<transition condition="${customRepoProxies != null}">
			<targetStepName>check whether to raise event</targetStepName>
		</transition>
		<transition condition="=true">
			<targetStepName>delete_proxy_temp_file</targetStepName>
		</transition>
	</saveAssetStep>

	<deleteFileStep name="delete_proxy_temp_file" sourceFilesExpression="${tempThumbnailFile}" continueOnException="true">
		<transition condition="=true">
			<targetStepName>delete_thumb_temp_file</targetStepName>
		</transition>
	</deleteFileStep>

	<deleteFileStep name="delete_thumb_temp_file" sourceFilesExpression="${tempThumbnailProxyFile}"
	                continueOnException="true">
		<transition condition="=true">
			<targetStepName>check whether to raise event</targetStepName>
		</transition>
	</deleteFileStep>


	<noopStep name="check whether to raise event">
		<transition condition="${existingAssetVersion == null}">
			<targetStepName>raise asset ingested event</targetStepName>
		</transition>
		<transition condition="=true">
			<targetStepName>end</targetStepName>
		</transition>
	</noopStep>

	<raiseWorkflowEventStep name="raise asset ingested event"
	                        eventTypeExpression="AssetIngested" continueOnException="true"
	                        executionLabelExpression="Sending Asset Ingested event"
	                        emailAddressesExpression="${emailAddresses}"
	                        summaryExpression="Asset ${assetVersion.name} has been ingested successfully">
		<property name="ingestedFileName">${fileToIngest.name}</property>
		<property name="ingestedFilePath">${fileToIngest.absolutePath}</property>
	</raiseWorkflowEventStep>

	<testStep name="log unchanged asset"
	          outputExpression="Asset file ${fileToIngest.name} has not been modified, skipping ingest."/>

	<noopStep name="end"/>
	
	<contextDataDef name="collections" label="Collections" dataType="Data Object" multiple="true" userInput="true"/>
	<contextDataDef name="categories" label="Categories" dataType="Data Object" multiple="true" userInput="true"/>
	<contextDataDef name="categoryName" dataType="String"/>
	
	<!-- transcode priorities -->
	<contextDataDef name="prioritiesJson" dataType="JSON" defaultDataExpression="{mezzanine:&quot;25&quot;, proxy:&quot;50&quot;, thumbnailMovie:&quot;75&quot;}"/>
	<contextDataDef name="mezzaninePriority" dataType="Integer" defaultDataExpression="${prioritiesJson.mezzanine}"/>
	<contextDataDef name="proxyPriority" dataType="Integer" defaultDataExpression="${prioritiesJson.proxy}"/>
	<contextDataDef name="thumbnailVideoPriority" dataType="Integer" defaultDataExpression="${prioritiesJson.thumbnailMovie}"/>
	<!-- custom repo: {source:"/path/to/where/the/repo/file/will/go",mezzanine:"ditto",proxies:"ditto"} note:proxies (all proxies), not proxy! -->
	<contextDataDef name="customRepoLocationJson" dataType="JSON" defaultDataExpression="{}"/>
	<!-- calculated for repo locations -->
	<contextDataDef name="customRepoSource" dataType="String" defaultDataExpression="${customRepoLocationJson.source}"/>
	<contextDataDef name="customRepoMezzanine" dataType="String" defaultDataExpression="${customRepoLocationJson.mezzanine}"/>
	<contextDataDef name="customRepoProxies" dataType="String" defaultDataExpression="${customRepoLocationJson.proxies}"/>	
	
	<!-- asynchronous creation of proxies -->
	<contextDataDef name="asyncProxiesFlag" dataType="Boolean" defaultDataExpression="false"/>
	<!-- exif extraction flag -->
	<contextDataDef name="exifExtraction" dataType="Boolean" defaultDataExpression="false"/>
	<contextDataDef name="exifMetadata" dataType="NameValuePair" multiple="true"/>
	<contextDataDef name="exifMetadataGroupName" label="Metadata Group" dataType="String" defaultDataExpression="EXIF Metadata"/>
	<contextDataDef name="exifPrefix" dataType="String" defaultDataExpression="exif"/>

	<contextDataDef name="imagemagick" dataType="String"
	                defaultDataExpression="${#sysconfig('imagemagick.path')}/convert"/>
	<contextDataDef name="tempPath" dataType="String" defaultDataExpression="${#sysconfig('temp.dir')}"/>
	<contextDataDef name="thumbnailFile" dataType="File"/>
	<contextDataDef name="tempThumbnailFile" dataType="File"/>
	<contextDataDef name="thumbnailProxyFile" dataType="File"/>
	<contextDataDef name="tempThumbnailProxyFile" dataType="File"/>
	<contextDataDef name="allowDuplicateNamesFlag" dataType="Boolean" defaultDataExpression="${false}"/>
	<contextDataDef name="fileToIngest" dataType="File" label="File" required="true" userInput="true"/>
	<contextDataDef name="fileToIngestName" dataType="String"/>
	<contextDataDef name="assetVersion" dataType="Data Object"/>
	<contextDataDef name="assetMaster" dataType="Data Object"/>
	<contextDataDef name="existingAssetMaster" dataType="Data Object"/>
	<contextDataDef name="existingAssetVersion" dataType="Data Object"/>
	<contextDataDef name="existingAssetContent" dataType="Data Object"/>
	<contextDataDef name="metadataRootPath" dataType="Directory"/>
	<contextDataDef name="metadataPathProperties" dataType="String" multiple="true"/>
	<contextDataDef name="metadata" dataType="NameValuePair" multiple="true"/>
	<contextDataDef name="jsonMetadata" dataType="JSON" multiple="false"/>
	<contextDataDef name="emailAddresses" dataType="String" multiple="true"/>
	<contextDataDef name="skipMezzanineFlag" dataType="Boolean" defaultDataExpression="${false}"/>
</workflow>
