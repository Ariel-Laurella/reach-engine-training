
<!-- This workflow is intended to send a video asset to Brightcove. -->

<workflow xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns="http://levelsbeyond.com/schema/workflow"
          xmlns:nimbus="http://levelsbeyond.com/schema/workflow/nimbus"
          xsi:schemaLocation="http://levelsbeyond.com/schema/workflow http://www.levelsbeyond.com/schema/latest/studio.xsd"
          id="SendVideoToBrightcove"
          name="Send Video to Brightcove"
          executionLabelExpression="Send Asset to Brightcove"
          subjectDOClassName="VideoAssetMaster"
          showInUserInterface="false"
          resultDataDef="deliveryStatus"
          deadlineExpression=""
          sdkVersion="5.21"
>

    <initialStepName>get authentication token</initialStepName>


    <!-- Get Authorization Token from Brightcove .......................................................................-->

    <submitHttpStep name="get authentication token"
                    urlExpression="https://oauth.brightcove.com/v4/access_token"
                    requestMethodExpression="POST"
                    responseCodeDataDef="responseCode"
                    responsePayloadDataDef="authResponsePayload"
                    executionLabelExpression="Returning token from Brightcove"
                    nextStep="create video">
        <requestPayloadItem name="body">${authPayload}</requestPayloadItem>
        <requestHeader name="Content-Type">application/x-www-form-urlencoded</requestHeader>
        <requestHeader name="Authorization">${brightcoveEncodedAuth}</requestHeader>
    </submitHttpStep>


    <!-- Create video on Brightcove ....................................................................................-->

    <submitHttpStep name="create video"
                    urlExpression="https://cms.api.brightcove.com/v1/accounts/${brightcoveAccountId}/videos"
                    requestMethodExpression="POST"
                    responseCodeDataDef="responseCode"
                    responsePayloadDataDef="responsePayload"
                    executionLabelExpression="Creating video on Brightcove"
                    nextStep="set video id">
        <requestPayloadItem name="body">
            <![CDATA[
{
  "name": "test by Ariel - ${dateTimeNow.toString()}"
}
            ]]>
        </requestPayloadItem>
        <requestHeader name="Content-Type">application/json</requestHeader>
        <requestHeader name="Authorization">${authResponsePayload.get('token_type').asText()} ${authResponsePayload.get('access_token').asText()}</requestHeader>
    </submitHttpStep>


    <!-- Get Upload URL for Amazon S3 ...................................................................................-->

    <setContextData name="set video id"
                    targetDataDef="brightcoveVideoId"
                    valueExpression="${responsePayload.get('id').asText()}"
                    devStep="true"
                    nextStep="get upload url"
    />

    <!--
    /*
Update code to send multiple files.
We intend to supply a source video file as well as a sidecar caption document, image, etc...

The parent workflow will supply 1 video & 1 caption document as "File" data type.
All files supplied will be relevant to a single uploaded content.

Make sure that we send each file with a unique filename to avoid colission.

uuid.mp4
uuid.vtt

Use #extension function in Reach docs to gather file exension

*/
-->
    <setContextData name="adjust data for second upload"
                    nextStep="get upload url"
                    >
        <set targetDataDef="fileToSend"     valueExpression="${captionsToUpload.absolutePath.toString()}"/>
        <set targetDataDef="fileExtension"  valueExpression="${#extension(captionsToUpload)}"/>
    </setContextData>


    <submitHttpStep name="get upload url"
                    urlExpression="https://cms.api.brightcove.com/v1/accounts/${brightcoveAccountId}/videos/${brightcoveVideoId}/upload-urls/${subject.name}"
                    requestMethodExpression="GET"
                    responseCodeDataDef="responseCode"
                    responsePayloadDataDef="responsePayload"
                    executionLabelExpression="Getting upload url for Amazon S3"
                    nextStep="set bucket">
        <requestHeader name="Content-Type">application/json</requestHeader>
        <requestHeader name="Authorization">${authResponsePayload.get('token_type').asText()} ${authResponsePayload.get('access_token').asText()}</requestHeader>
    </submitHttpStep>

    <setContextData name="set bucket"
                    targetDataDef="amazonBucketName"
                    valueExpression="${responsePayload.get('bucket').asText()}"
                    devStep="true"
                    nextStep="set key name"
    />
    <setContextData name="set key name"
                    targetDataDef="amazonKeyName"
                    valueExpression="${responsePayload.get('object_key').asText()}"
                    devStep="true"
                    nextStep="set access key"
    />
    <setContextData name="set access key"
                    targetDataDef="amazonAccessKey"
                    valueExpression="${responsePayload.get('access_key_id').asText()}"
                    devStep="true"
                    nextStep="set secret key"
    />
    <setContextData name="set secret key"
                    targetDataDef="amazonSecretKey"
                    valueExpression="${responsePayload.get('secret_access_key').asText()}"
                    devStep="true"
                    nextStep="set session token"
    />
    <setContextData name="set session token"
                    targetDataDef="amazonSessionToken"
                    valueExpression="${responsePayload.get('session_token').asText()}"
                    devStep="true"
                    nextStep="set request url"
    />

    <setContextData name="set request url"
                    targetDataDef="amazonRequestUrl"
                    valueExpression="${responsePayload.get('api_request_url').asText()}"
                    devStep="true"
                    nextStep="upload video"
    />





    <!-- Upload video to Amazon S3 ......................................................................................-->

    <groovyStep name="upload video"
                resultDataDef="amazonUploadResult"
                nextStep="increment file counter"
    >
        <script>
            <![CDATA[
/*
* This code uses Aws SDK 1.11. It Uploads a file to S3 Storage in multiple parts using bandwidth control
* with Google guava throttle library.  Each chunk uploaded is controlled by guava
* throttle in order to maintain the desired bandwidth set up by txRate variable.
 */


import com.amazonaws.SdkClientException
import com.amazonaws.auth.AWSCredentials
import com.amazonaws.auth.BasicSessionCredentials
import com.amazonaws.regions.Regions
import com.amazonaws.services.s3.AmazonS3
import com.amazonaws.services.s3.AmazonS3ClientBuilder
import com.amazonaws.services.s3.model.*
import com.amazonaws.auth.BasicAWSCredentials
import com.amazonaws.auth.AWSStaticCredentialsProvider
import com.google.common.util.concurrent.RateLimiter
import org.apache.http.protocol.HttpRequestExecutor
import groovy.json.JsonSlurper


/*
* Uploading a file to S3 in parts
*/

def slurper = new JsonSlurper()
Map uploadUrlPayload = slurper.parseText(responsePayload.toString())

/*
uploadUrlPayload is now a MAP <string, object>

uploadUrlPayload.api_request_url --> "http://s3.path.to.file.com/filename.mp4"

*/

// I would like a default speed of 50 MB/s or 500 Megabits/s. Allow parent workflow to specify speed, units can be defined however is easier.

//This will capture the individual Upload URLs that we have completed.
// This is an example of variable sharing between Reach (XML) and Groovy

if (uploadedFileUrls == null){
    uploadedFileUrls = new ArrayList()
}

if(uploadedFileUrls != null){
// this occurs only when we have a valid array list
    uploadFileUrls.add(uploadUrlPayload.api_request_url)
}


int txRate = amazonTxRateKBps * 1024                       //Maximum desired upload bandwidth in bytes per second
def uploadResultProcess = 'ERROR'


File sourceFile = new File(localFilePath)
RateLimiter limiter = RateLimiter.create(txRate)
long maxChunkLength = 5 * 1024 * 1024                       // Set chunkLength to 5 MB maximum.
long chunkLength = 0
Date startTime = (new Date())
long filePosition = 0
int chunkNumber = 1

// Create a list of ETag objects. You retrieve ETags for each object part uploaded,
// then, after each individual part has been uploaded, pass the list of ETags to
// the request to complete the upload.
List<PartETag> partETags = new  ArrayList<PartETag>()

try {

    AWSCredentials credentials = new BasicSessionCredentials(amazonAccessKey,amazonSecretKey,amazonSessionToken)

    AmazonS3 s3Client = AmazonS3ClientBuilder
            .standard()
            .withCredentials(new AWSStaticCredentialsProvider(credentials))
            .withRegion(Regions.US_EAST_1)
            .build()


// First create a multipart upload and get upload id

    InitiateMultipartUploadRequest initRequest = new InitiateMultipartUploadRequest(amazonBucketName, amazonKeyName)
    InitiateMultipartUploadResult initResponse = s3Client.initiateMultipartUpload(initRequest)


// Upload all the different parts of the file in chunks

    println("File Path................: " + localFilePath)
    println("Start Time...............: " + startTime.toString())


    while ((filePosition < sourceFile.length())) {

        //Adjust the chunkLength to upload as needed. The last part could be less than 5 MB.
        chunkLength = (sourceFile.length() - filePosition > maxChunkLength) ? maxChunkLength : sourceFile.length() - filePosition

        // Create the request to upload a part
        UploadPartRequest uploadPartRequest = new UploadPartRequest()
                .withBucketName(amazonBucketName)
                .withKey(amazonKeyName)
                .withUploadId(initResponse.getUploadId())
                .withPartNumber(chunkNumber)
                .withFileOffset(filePosition)
                .withFile(sourceFile)
                .withPartSize(chunkLength)

        // Upload the part
        UploadPartResult uploadResult = s3Client.uploadPart(uploadPartRequest)

        // Create a list of ETag objects to merge at the end.
        partETags.add(uploadResult.getPartETag())

        //move file position to the next step
        filePosition += chunkLength
        chunkNumber += 1

        //Bandwidth control
        limiter.acquire((int) chunkLength)
    }


// Finally call completeMultipartUpload operation to tell S3 to merge all uploaded
// parts and finish the multipart operation. Pass the list of ETags.
    CompleteMultipartUploadRequest compRequest = new CompleteMultipartUploadRequest(amazonBucketName, amazonKeyName, initResponse.getUploadId(), partETags)

    s3Client.completeMultipartUpload(compRequest)
    uploadResultProcess = "SUCCESS"

//Print results

    Date stopTime = new Date()
    long fileLengthKB = sourceFile.length() / 1024
    long uploadDuration = (stopTime.getTime() - startTime.getTime()) / 1000
    long averageBandwidth = fileLengthKB / uploadDuration
    println("Stop Time................: " + stopTime.toString())
    println("file lenght [KB].........: " + fileLengthKB.toString())
    println("Upload duration [s]......: " + uploadDuration.toString())
    println("Desired Bandwidth [KB/s].: " + (txRate / 1024).toString())
    println("Average Bandwidth [KB/s].: " + averageBandwidth.toString())
}
catch (Exception e) {
    println("Upload failed with error: " + e.getMessage())

}
finally {
    return uploadResultProcess
}
        ]]>
        </script>
    </groovyStep>

    <setContextData name="increment file counter"
                    targetDataDef="fileCounter"
                    valueExpression="${fileCounter + 1}"
                    >
        <transition condition="${fileCounter &lt; numberFilesToSend}">
            <targetStepName>adjust data for second upload</targetStepName>
        </transition>
        <transition condition="${true}">
            <targetStepName>ingest video</targetStepName>
        </transition>
    </setContextData>

    <!-- this is the end of the upload loop -->

   <!-- make sure that your operators inside of XML are escaped

   Less than "<" becomes &lt; inside of XML.

   This DOES NOT apply within a groovy script. Only XML expressions like abov

   -->



    <!-- Ingest video on Brightcove ....................................................................................-->

    <!-- Add to this:
     Allow a parent workflow to pass in a poster URL, height, and width of image.

Before you ingest the new content, upload all source files first.

     -->


<!-- once video and captions are uploaded, we need to craft a JSON that identifies both

Videos supplied will ALWAYS be MP4 extension
Captions supplied will ALWAYS be VTT extension

There will NEVER be a instance where a video is sent ALONE. It will always have a poster image and captions.

For now, there will always be just 1 caption document.

-->

    <submitHttpStep name="ingest video"
                    urlExpression="https://cms.api.brightcove.com/v1/accounts/${brightcoveAccountId}/videos/${brightcoveVideoId}/ingest-requests"
                    requestMethodExpression="POST"
                    responseCodeDataDef="responseCode"
                    responsePayloadDataDef="responsePayload"
                    executionLabelExpression="Ingesting video on Brightcove"
                    nextStep="end">
        <requestPayloadItem name="body">
            <![CDATA[
{
  "master": {
    "url": "${uploadedFileUrls[0].contains('.mp4') ? uploadedFileUrls[0] : uploadedFileUrls[1] }"
  },
  "poster": {
    "url": "https://s3-us-west-2.amazonaws.com/svodimage/MVMZ1973_16x9_no_title.jpg",
    "width": 1920,
    "height": 1080
  },
  "text_tracks": [
    [
      {
        "url": "${uploadedFileUrls[1]}",
        "srclang": "en",
        "kind": "captions",
        "label": "EN",
        "default": true
      }
    ]
  ],
  "capture-images": false
}
            ]]>
        </requestPayloadItem>
        <requestHeader name="Content-Type">application/json</requestHeader>
        <requestHeader name="Authorization">${authResponsePayload.get('token_type').asText()} ${authResponsePayload.get('access_token').asText()}</requestHeader>
    </submitHttpStep>


    <!-- Start loop to check for completion. We do want to wait until completion before returning-->

    <submitHttpStep name="check for completion"
                    urlExpression="https://cms.api.brightcove.com/v1/accounts/${brightcoveAccountId}/videos/${brightcoveVideoId}/ingest_jobs"
                    requestMethodExpression="GET"
                    responseCodeDataDef="responseCode"
                    responsePayloadDataDef="responsePayload"
                    executionLabelExpression="Checking for completion"
                    >
        <transition condition="${responsePayload.get('status').asText().equals('processing')}">
            <targetStepName>wait some time</targetStepName>
        </transition>
        <transition condition="${responsePayload.get('status').asText().equals('completed')}">
            <targetStepName>do something else</targetStepName>
        </transition>
        <transition condition="${true}">
            <targetStepName>set fail status</targetStepName>
        </transition>
        <requestHeader name="Content-Type">application/json</requestHeader>
        <requestHeader name="Authorization">${authResponsePayload.get('token_type').asText()} ${authResponsePayload.get('access_token').asText()}</requestHeader>
    </submitHttpStep>

    <delayStep name="wait some time"
               delaySecondsExpression="300"
               nextStep="check for completion"
               />

    <!-- Explore the idea of some timeout. In the case that processing takes too long, perhaps we want to fail on our side and set a message

    To get duration you need the VideoAssetMaster then the expression would be

    VideoAssetMaster.AssetContent.duration

    or

    ${subject.mezzanine.duration}

    It will resolve to a double in seconds. Example: 4531.585

    -->


    <!-- End loop to check for completion -->

    <!-- when successful you must set a 'success' return for the parent-->

    <setContextData name=""
                    targetDataDef="deliveryStatus"
                    valueExpression="success"



    <!--  End and fail steps ...........................................................................................-->

    <noopStep name="end"
              executionLabelExpression="end" />


    <!--  Context Data Definitions .....................................................................................-->


    <!-- ... Passed in from Parent ... -->
    <contextDataDef name="uploadName"               dataType="String" defaultDataExpression="No name given"/>
    <contextDataDef name="houseCode"                dataType="String"/>
    <!-- House code is another custom field we will need. Let's come back to this-->
    <contextDataDef name="videoToUpload"            dataType="File"/>
    <contextDataDef name="captionsToUpload"         dataType="File"/>
    <contextDataDef name="posterData"                dataType="JSON" />
    <!--
    {
       "posterUrl": "https://s3-us-west-2.amazonaws.com/svodimage/MVMZ1973_16x9_no_title.jpg",
       "height": 1080,
       "width": 1920
    }
    -->
    <!-- Devin will also send the VideoAssetMaster (selection) as "subject"-->

    <contextDataDef name="fileToSend"               dataType="String"  defaultDataExpression="${videoToUpload.absolutePath.toString()}"/>
    <!-- this will default to the video, send that first-->
    <contextDataDef name="fileExtension"            dataType="String"  defaultDataExpression="${#extension(videoToUpload)}"/>

    <!-- This will be sent back to parent workflow -->
    <contextDataDef name="deliveryStatus"           dataType="String"  defaultDataExpression="failure">
        <description>This can either be 'success' or 'failure'</description>
    </contextDataDef>

    <contextDataDef name="fileCounter"              dataType="Integer" defaultDataExpression="0"/>
    <contextDataDef name="numberFilesToSend"        dataType="Integer" defaultDataExpression="2"/>
    <contextDataDef name="uploadedFileUrls"         dataType="String"  multiple="true"/>


    <contextDataDef name="localFilePath"            dataType="String"  defaultDataExpression="${subject.mezzanine.file.absolutePath}" />
    <contextDataDef name="dateTimeNow"              dataType="Date/Time"  defaultDataExpression="${#newDate()}" />
    <contextDataDef name="authPayload"              dataType="String" hidden="true" defaultDataExpression="grant_type=client_credentials&amp;client_id=${brightcoveClientId}&amp;client_secret=${brightcoveClientSecret}" />
    <contextDataDef name="authResponsePayload"      dataType="JSON" />
    <contextDataDef name="responsePayload"          dataType="JSON" />
    <contextDataDef name="responseCode"             dataType="Integer" />
    <contextDataDef name="amazonBucketName"         dataType="String" />
    <contextDataDef name="amazonKeyName"            dataType="String" />
    <contextDataDef name="amazonAccessKey"          dataType="String" />
    <contextDataDef name="amazonSecretKey"          dataType="String" />
    <contextDataDef name="amazonSessionToken"       dataType="String" />
    <contextDataDef name="amazonRequestUrl"         dataType="String" />
    <contextDataDef name="amazonUploadResult"       dataType="String" />
    <contextDataDef name="amazonTxRateKBps"         dataType="Integer" defaultDataExpression="1024" />
    <contextDataDef name="brightcoveClientId"       dataType="String" hidden="true" defaultDataExpression="0ed173bb-9a77-45ec-8346-293474420f29" />
    <contextDataDef name="brightcoveClientSecret"   dataType="String" hidden="true" defaultDataExpression="-K6ATWzUfNIwFRL1V09j9qTMq7vRT1nlaDCOdrh6QuEVD-Ji6vlhNZplbJRibIXEcUWDJ_dq7XCqlhjCQyWOFg" />
    <contextDataDef name="brightcoveEncodedAuth"    dataType="String" hidden="true" defaultDataExpression="Bearer MGVkMTczYmItOWE3Ny00NWVjLTgzNDYtMjkzNDc0NDIwZjI5Oi1LNkFUV3pVZk5Jd0ZSTDFWMDlqOXFUTXE3dlJUMW5sYURDT2RyaDZRdUVWRC1KaTZ2bGhOWnBsYkpSaWJJWEVjVVdESl9kcTdYQ3FsaGpDUXlXT0Zn" />
    <contextDataDef name="brightcoveAccountId"      dataType="String" hidden="true" defaultDataExpression="6058022072001"/>
    <contextDataDef name="brightcoveVideoId"        dataType="String"   />

</workflow>
